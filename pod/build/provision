#!/bin/bash
# Run from Dockerfile
#
# Functions make simple checks to know whether they have been run already,
# this is to help during development by allowing to call the script repeatedly.

set -ex

installed() {
    type "$@" &> /dev/null
}

# dependencies: none
install_nvm() {
    [[ -f $NVM_DIR/nvm.sh ]] || {
        mkdir -p $NVM_DIR
        NVM_DIR=$NVM_DIR /pod/build/nvm-install.sh
    }
    set +x
    source $NVM_DIR/nvm.sh
    set -x
}

# using this wrapper to do set +x, nvm is a very verbose shell function
nvm_install() {
    echo running nvm install "$@"
    set +x
    nvm install "$@"
    set -x
}

# dependencies: yarn tar.gz
install_yarn() {
    [[ -d /usr/local/lib/yarn ]] && return
    cd /usr/local/lib
    curl -Lo yarn.tar.gz https://yarnpkg.com/latest.tar.gz
    tar xfz yarn.tar.gz
    mv yarn-* yarn
    rm yarn.tar.gz
    ln -sv /usr/local/lib/yarn/bin/yarn /usr/local/bin/
}

# dependencies: node version + yarn + wetty tar.gz + npm repo
install_wetty() {
    [[ -d $WETTY_DIR ]] && return
    cd /usr/local/tmp
    curl -o wetty.zip https://codeload.github.com/perpen/wetty/zip/master
    unzip -q wetty.zip
    rm wetty.zip
    mv wetty-master $WETTY_DIR
    cd $WETTY_DIR
    nvm_install $WETTY_NODE_VERSION
    yarn
    yarn build
    yarn install --production --ignore-scripts --prefer-offline
    chmod -R a+rX $WETTY_DIR
}

# dependencies: node version + yarn + theia tar.gz + npm repo
install_theia() {
    [[ -d $THEIA_DIR ]] && return
    cd /usr/local/tmp
    curl -o theia.zip https://codeload.github.com/theia-ide/theia/zip/master
    unzip -q theia.zip
    rm theia.zip
    mv theia-master $THEIA_DIR
    cd $THEIA_DIR
    nvm_install $THEIA_NODE_VERSION
    yarn
    # FIXME why needs write??
    chmod -R a+rwX $THEIA_DIR
}

# dependencies: yum repos
install_packages() {
    installed unzip && return
    yum update -y
    yum install -y sudo bash vim sudo tmux git openssh openssh-server \
        gnupg2 at unzip gcc gcc-c++ make automake \
        python-virtualenv openssl \
        haproxy net-tools
}

# dependencies: none
install_pod() {
    [[ -L /bin/pod ]] && return
    
    cd /pod/runtime/app
    yarn
    
    # pair user
    adduser -s /pod/cli/pod-pairing pair
    ( echo "pair:pair" | chpasswd )
    
    # sudoers
    echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
    
    # pod
    ln -s /pod/cli/pod /bin
}

# theia needs a modern git
# dependencies: git tar.gz, yum repos
install_git() {
    [[ -f /usr/local/bin/git ]] && return
    local packages="curl-devel expat-devel gettext-devel openssl-devel zlib-devel \
        perl-ExtUtils-MakeMaker"
    yum remove -y git || true
    yum install -y $packages
    curl -Lo- https://www.kernel.org/pub/software/scm/git/git-2.20.1.tar.gz \
        | tar xfz - -C/usr/local/tmp
    cd /usr/local/tmp/git-*
    make -j$CONCURRENCY_LEVEL prefix=/usr/local all
    make prefix=/usr/local install
    cd ..
    rm -rf git-*
    git --version
    #FIXME - removes c++?? - yum remove -y $packages
}

# the tmux from yum is dusty
# dependencies: tmux tar.gz, yum repos
install_tmux() {
    [[ -f /usr/local/bin/tmux ]] && return
    local packages="libevent-devel ncurses-devel"
    yum remove -y tmux || true
    yum install -y $packages
    cd /usr/local/tmp
    curl -L -o tmux.zip https://github.com/tmux/tmux/archive/master.zip
    unzip -q tmux.zip
    rm tmux.zip
    cd tmux-*
    sh autogen.sh
    ./configure
    make -j$CONCURRENCY_LEVEL
    make install
    cd ..
    rm -rf tmuxd-*
    tmux -V
    #FIXME - removes c++?? - yum remove -y $packages
}

###############

source $(dirname $0)/../config.sh
CONCURRENCY_LEVEL=$(awk '/^processor\t:/ {n=$3} END {print n}' /proc/cpuinfo)

mkdir -p /usr/local/tmp

if [[ -z "$1" ]]; then
    install_packages
    install_nvm
    install_yarn
    install_git
    install_tmux
    install_wetty
    install_theia
    install_pod
else
    eval "$@"
fi
