#!/bin/bash
# Dockerfile entry point, runs the non-interactive user-dependent stuff

set -ex

[[ $# -lt 3 ]] && {
    cat <<EOF 1>&2
Usage: $0 POD_NUMBER OPTIONS USER USER_DISPLAY_NAME GIT_URL_HOMEDIR [GIT_URL ...]
EOF
    exit 2
}

export POD_NUMBER="$1"
export POD_OPTIONS="$2"
export POD_USER="$3"
export POD_USER_DISPLAY_NAME="$4"
export POD_HOMEDIR_URL="$5"
shift 5
export POD_PROJECTS_URLS="$*"

# Setup user
# Centos doesn't allow usernames like \d+, so we create a temp user that we
# then rename.
tmp_user=x$POD_USER
adduser -s /bin/bash -G pair $tmp_user
echo "$tmp_user:pass" | chpasswd
for file in /etc/{passwd,shadow,shadow-,group,gshadow}; do
    sed -i "s/$tmp_user/$POD_USER/g" $file
done
mv /home/{$tmp_user,$POD_USER}
sed -i "s/^\(wheel:.*\)$/\1,$POD_USER/" /etc/group
sed -i "s/^\(pair:.*\)$/\1,$POD_USER/" /etc/group
echo $POD_USER >> /etc/at.allow

# Run user init, eg clone projects repos
su $POD_USER -c "/pod/runtime/user-init $POD_PROJECTS_URLS"

# If this file appears, we stop the container
set +x
while :; do
    [[ -f /tmp/pod-must-die ]] && {
        pkill sshd || true
        pkill node || true
    }
    sleep 5
done &
set -x

# Start UIs
# atm POD_OPTIONS is a comma-separated list of UI names, eg. "wetty,theia"
for ui in $(echo $POD_OPTIONS | tr , '\n' | sort | uniq); do
    case $ui in
    wetty) pod-wetty /pod/$POD_NUMBER & ;;
    theia) su $POD_USER -c pod-theia & ;;
    *) echo "$0: Ignoring unknown option: $ui" 1>&2 ;;
    esac
done
/pod/runtime/landing &
/pod/runtime/haproxy.sh start -V &

ssh-keygen -A
/usr/sbin/sshd -D
